from __future__ import annotations

import csv
import json
import uuid
from datetime import datetime, timezone
from pathlib import Path
from typing import Any, Optional

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

# ───────────────────────── Optional Supabase import ───────────────────────── #
try:
    from supabase import Client, create_client  # type: ignore
except ModuleNotFoundError:
    Client = Any
    create_client = None  # type: ignore

# ─────────────────────── Page config & style tweak ────────────────────────── #
st.set_page_config(page_title="CSRD Benchmarking Report", layout="wide")
st.markdown("<style>.block-container{padding-top:2.5rem}</style>",
            unsafe_allow_html=True)

# ─────────────────────────── Tracking targets ─────────────────────────────── #
LOCAL_LOG = Path("events_log.csv")


def _is_jwt(key: str) -> bool:
    """Rough check whether *key* looks like a Supabase anon JWT."""
    return key.startswith("ey") and len(key) > 30


@st.cache_resource(show_spinner=False)
def init_supabase() -> Optional[Any]:
    """Create Supabase client or *None* → fall back to CSV logging."""
    if (create_client
            and "supabase_url" in st.secrets
            and "supabase_key" in st.secrets
            and _is_jwt(st.secrets["supabase_key"])):
        return create_client(st.secrets["supabase_url"],
                             st.secrets["supabase_key"])

    if "_fallback_warn" not in st.session_state:
        st.warning(f"🔧 No valid Supabase creds – logging to '{LOCAL_LOG}'.", icon="📝")
        st.session_state._fallback_warn = True

    if not LOCAL_LOG.exists():
        with LOCAL_LOG.open("w", newline="", encoding="utf-8") as fp:
            csv.DictWriter(fp, fieldnames=[
                "timestamp", "session_id", "userid", "snapshot"
            ]).writeheader()
    return None


supabase = init_supabase()

# ───────────────────────── Session & query params ─────────────────────────── #
if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

qp = st.experimental_get_query_params()
user_id = qp.get("userid", ["anonymous"])[0] or "anonymous"

# ─────────────────────────── Persist snapshot ─────────────────────────────── #
def _persist(snapshot: dict) -> None:
    record = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "session_id": st.session_state.session_id,
        "userid": user_id,
        "snapshot": json.dumps(snapshot, default=str),
    }

    if supabase is not None:
        try:
            supabase.table("app_events").insert(record).execute()
            return
        except Exception as exc:  # noqa: BLE001
            st.warning(f"⚠️ Supabase insert failed: {exc}", icon="🚧")

    with LOCAL_LOG.open("a", newline="", encoding="utf-8") as fp:
        csv.DictWriter(fp, fieldnames=record.keys()).writerow(record)

# ───────────────────────────── Data loading ───────────────────────────────── #
df = pd.read_csv("report_data.csv")

# ───────────── Default focal company from ?company=… (fallback first) ─────── #
companies = df["name"].dropna().unique().tolist()
mapping = {n.strip().casefold(): n for n in companies}
default_company = mapping.get(qp.get("company", [""])[0].casefold(), companies[0])

# ───────────────────────────── Sidebar UI ─────────────────────────────────── #
st.sidebar.header("Focal Company Selection")
focal_company = st.sidebar.selectbox(
    "Select a focal company:",
    companies,
    index=companies.index(default_company),
)

# keep URL shareable
st.query_params = {"userid": [user_id], "company": [focal_company]}

st.sidebar.header("Benchmark Group")
benchmark_type = st.sidebar.radio(
    "Compare to:",
    ["All CSRD First Wave", "Country Peers", "Sector Peers",
     "Market Cap Peers", "Rating Peers"],
)

peer_selection = st.sidebar.multiselect(
    "Or choose up to 3 specific peer companies:",
    companies,
    default=[],
    max_selections=3,
)

st.sidebar.header("Chart Type")
plot_type = st.sidebar.radio("Select plot type:",
                             ["Strip Plot", "Bar Chart", "Histogram"])

# ─────────────────────── Header & tab navigation ──────────────────────────── #
st.title("CSRD Report Benchmarking")
tab_textual, tab_materiality = st.tabs(["Textual Analysis", "Materiality Analysis"])

# ─────────────────────── Benchmark DataFrame build ────────────────────────── #
benchmark_label = "All CSRD First Wave"
if peer_selection:
    benchmark_df = df[df["name"].isin(peer_selection)]
    benchmark_label = f"Selected Peers ({len(benchmark_df)} firms)"
elif benchmark_type == "All CSRD First Wave":
    benchmark_df = df
elif benchmark_type == "Country Peers":
    val = df.loc[df['name'] == focal_company, 'country'].iat[0]
    benchmark_df = df[df['country'] == val]
    benchmark_label = f"Country Peers: {val}"
elif benchmark_type == "Sector Peers":
    val = df.loc[df['name'] == focal_company,
                 'trbceconomicsectorname'].iat[0]
    benchmark_df = df[df['trbceconomicsectorname'] == val]
    benchmark_label = f"Sector Peers: {val}"
elif benchmark_type == "Market Cap Peers":
    val = df.loc[df['name'] == focal_company, 'market_cap_tercile'].iat[0]
    benchmark_df = df[df['market_cap_tercile'] == val]
    benchmark_label = f"Market Cap Group: {['Small','Mid','Large'][val-1]}"
else:  # Rating Peers
    val = df.loc[df['name'] == focal_company, 'rating_tercile'].iat[0]
    benchmark_df = df[df['rating_tercile'] == val]
    benchmark_label = f"ESG Rating Group: {['Low','Mid','High'][val-1]}"

# ─────────────────────────── Textual Analysis tab ─────────────────────────── #
with tab_textual:
    focal_pages = df.loc[df['name'] == focal_company, 'pagespdf'].iat[0]
    focal_words = df.loc[df['name'] == focal_company, 'words'].iat[0]

    st.subheader(f"Distribution of Pages ({benchmark_label})")
    # plotting logic (unchanged) …
    st.write("Page distribution plot placeholder")

    st.subheader(f"Distribution of Words ({benchmark_label})")
    # plotting logic (unchanged) …
    st.write("Word distribution plot placeholder")

    st.subheader("Benchmark Data")
    st.dataframe(
        benchmark_df[['name', 'country', 'trbceconomicsectorname',
                      'pagespdf', 'words']].sort_values('pagespdf')
    )

# ─────────────────────────── Materiality tab ──────────────────────────────── #
with tab_materiality:
    st.subheader("Materiality Analysis")
    st.info("Dieser Bereich ist noch in Arbeit.")

# ─────────────────────────── Snapshot persistence ─────────────────────────── #
snapshot = dict(
    userid=user_id,
    focal_company=focal_company,
    benchmark_type=benchmark_type,
    peer_selection=peer_selection,
    plot_type=plot_type,
    active_tab="Textual Analysis"  # only two tabs, active known in this run
)

if snapshot != st.session_state.get("last_snapshot"):
    _persist(snapshot)
    st.session_state.last_snapshot = snapshot